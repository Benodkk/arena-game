{"version":3,"file":"static/js/331.6206397d.chunk.js","mappings":"mOAgMA,MAxLA,WACE,IAAMA,GAAQC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,CAAK,IACpCC,GAAWC,EAAAA,EAAAA,MAMjB,GAA4CC,EAAAA,EAAAA,UAAS,GAAE,eAAhDC,EAAc,KAAEC,EAAiB,KA6KxC,OA3KA,WAEE,IAAIC,EAAaC,KAAKC,SAGlBC,GAAgB,EAGhBC,EAAgB,EAGlBA,EADEZ,EAAMa,aAAaC,MAAMC,UAAUC,OAAS,EAE5ChB,EAAMa,aAAaC,MAAMC,UAAU,GACnCN,KAAKQ,OACFjB,EAAMa,aAAaC,MAAMC,UAAU,GAClCf,EAAMa,aAAaC,MAAMC,UAAU,GACnC,GACAN,KAAKC,UAGKV,EAAMa,aAAaC,MAAMC,UAAU,GAIrD,IAgBIG,EAhBAC,EAAsB,EAGxBA,EADEnB,EAAMa,aAAaC,MAAMM,WAAWC,KAAKL,OAAS,EAElDhB,EAAMa,aAAaC,MAAMM,WAAWC,KAAK,GACzCZ,KAAKQ,OACFjB,EAAMa,aAAaC,MAAMM,WAAWC,KAAK,GACxCrB,EAAMa,aAAaC,MAAMM,WAAWC,KAAK,GACzC,GACAZ,KAAKC,UAGWV,EAAMa,aAAaC,MAAMM,WAAWC,KAAK,GAQ/Db,EAAa,IACc,gBAA3BR,EAAMsB,mBACY,GAAlBhB,GACAN,EAAMuB,kBAAkBC,OAAS,IAEjCN,EAA4C,EAA5BlB,EAAMyB,aAAaC,OAA6B,IAAhBd,EAChDL,EAAkB,GAClBI,GAAgB,EAChBR,GAASwB,EAAAA,EAAAA,GAAS,CAAC,qBAEnBT,EAC8B,EAA5BlB,EAAMyB,aAAaC,OACH,IAAhBd,EACyB,IAAzBZ,EAAM4B,OAAO,GAAGC,OAGqB,UAArC7B,EAAM8B,MAAMhB,MAAMM,WAAWW,KACiB,UAA5C/B,EAAMa,aAAaC,MAAMM,WAAWW,KACtCb,GAAwD,EAAvClB,EAAM8B,MAAMhB,MAAMM,WAAWY,QAE9Cd,GACiE,GAA9DC,EAAsBnB,EAAM8B,MAAMhB,MAAMM,WAAWY,SAGR,iBAA5ChC,EAAMa,aAAaC,MAAMM,WAAWW,OACtCb,GAAuC,EAAtBC,GAMjBD,EAAgB,IAClBA,EAAgB,GAMlB,IAAIe,EAAcxB,KAAKC,SACnBwB,EAAKzB,KAAKC,SA4Bd,SAASyB,IAGa,GAAlB7B,GACAE,EAAa,IACbR,EAAMuB,kBAAkBC,OAAS,IACN,iBAA3BxB,EAAMsB,mBAENnB,GAASiC,EAAAA,EAAAA,IAAc,KACvBjC,GAASkC,EAAAA,EAAAA,IAAa,KACtB9B,EAAkB,GAClBJ,GAASwB,EAAAA,EAAAA,GAAS,CAAC,sBAEf3B,EAAMuB,kBAAkBC,OAAS,GAElBf,KAAKC,SACL,IACfP,GAASiC,EAAAA,EAAAA,IAAc,KACvBjC,GAASwB,EAAAA,EAAAA,GAAS,CAAC,aAEnBxB,GAASiC,EAAAA,EAAAA,IAAc,KACvBjC,GAASkC,EAAAA,EAAAA,IAAa,KACtBF,IACAhC,GAASwB,EAAAA,EAAAA,GAAS,CAAC,gBAIjBM,EAAc,GAChB9B,GAASiC,EAAAA,EAAAA,KAAe,KACfH,GAAe,IAAOA,EAAc,GAC7C9B,GAASiC,EAAAA,EAAAA,KAAe,KACfH,GAAe,IACxB9B,GAASiC,EAAAA,EAAAA,KAAe,KAEtBH,EAAc,IAAOC,EAAK,IAC5B/B,GAASmC,EAAAA,EAAAA,KAAc7B,KAAK8B,MAAMrB,KAClCf,GAASwB,EAAAA,EAAAA,GAAS,CAAC,UAAWlB,KAAK8B,MAAMrB,OAChCe,GAAe,IAAOA,EAAc,IAAOC,EAAK,IACzD/B,GAASmC,EAAAA,EAAAA,KAAc7B,KAAK8B,MAAsB,EAAhBrB,KAClCf,GAASwB,EAAAA,EAAAA,GAAS,CAAC,UAAWlB,KAAK8B,MAAsB,EAAhBrB,OAChCe,GAAe,IAAOC,EAAK,KACpC/B,GAASmC,EAAAA,EAAAA,KAAc7B,KAAK8B,MAAsB,EAAhBrB,KAClCf,GAASwB,EAAAA,EAAAA,GAAS,CAAC,UAAWlB,KAAK8B,MAAsB,EAAhBrB,OAEzCf,GAASwB,EAAAA,EAAAA,GAAS,CAAC,YAI3B,CAxEI3B,EAAMuB,kBAAkBC,OAAS,GACnCS,GAA4B,EACnBjC,EAAMuB,kBAAkBC,OAAS,KAC1CS,GAA4B,MAKR,GAAlB3B,IAEFY,GAAiBA,EACjBX,EAAkB,IAIA,GAAlBD,GACAE,EAAa,IACc,eAA3BR,EAAMsB,oBAENJ,GAAiB,EAAIlB,EAAMyB,aAAae,SACxCjC,EAAkB,GAClBJ,GAASwB,EAAAA,EAAAA,GAAS,CAAC,oBAsDA,GAAjBhB,EACF8B,YAAW,WACTN,GACF,GAAG,KAEHA,GAEJ,CAGF,E,2DCxHA,MA1DA,WACE,IAAMnC,GAAQC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,CAAK,IACpCgB,EAAgBwB,IAEtB,GAAkCrC,EAAAA,EAAAA,WAAS,GAAM,eAA1CsC,EAAS,KAAEC,EAAY,KAExBC,EAAaC,EAAAA,EAAAA,MAAc,SAACC,GAAC,OAAKA,EAAEC,MAAQhD,EAAMiD,WAAW,IAAEC,IAiBrE,OATAC,EAAAA,EAAAA,YAAU,WACRP,GAAa,GACTD,GAAa3C,EAAMuB,kBAAkB6B,OAAS,GAChDX,YAAW,WACTvB,GACF,GAAG,IAEP,GAAG,CAAClB,EAAM4B,OAAO,GAAGC,OAAQ7B,EAAMqD,WAAW7B,UAG3C,iBAAK8B,UAAU,8BAA6B,WAC1C,gBAAKC,IAAI,gBAAgBD,UAAU,aAAaE,IAAKX,KACrD,iBAAKS,UAAU,sBAAqB,WAClC,iBAAKA,UAAU,kBAAiB,WAC9B,iBAAKA,UAAU,WAAU,WACvB,gBAAKC,IAAI,SAASC,IAAKJ,KACvB,sCAAcpD,EAAMuB,kBAAkB6B,cAExC,iBAAKE,UAAU,WAAU,WACvB,gBAAKC,IAAI,SAASC,IAAKhC,KACvB,sCAAcxB,EAAMuB,kBAAkBC,iBAG1C,iBAAK8B,UAAU,kBAAiB,WAC9B,oCAAYtD,EAAMiD,gBAClB,qCAAajD,EAAMyD,iBACnB,iBAAKH,UAAU,WAAU,WACvB,gBAAKC,IAAI,SAASC,IAAK9B,KACvB,sCAAc1B,EAAMyB,aAAaC,cAEnC,iBAAK4B,UAAU,WAAU,WACvB,gBAAKC,IAAI,WAAWC,IAAKE,KACzB,uCAAe1D,EAAMyB,aAAaO,eAEpC,iBAAKsB,UAAU,WAAU,WACvB,gBAAKC,IAAI,WAAWC,IAAKJ,KACzB,wCAAgBpD,EAAMyB,aAAae,uBAM/C,C","sources":["hooks/useOponentMove.js","components/FightPlace/OponentDescription.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { oChangeEnergy } from \"../redux/oponent/oParameters\";\nimport { oGiveDefense } from \"../redux/oponent/oSkills\";\nimport { changeHealth } from \"../redux/user/parameters\";\nimport { makeMove } from \"../redux/user/move\";\n\nfunction useOponentMove() {\n  const store = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  // values: 0 - superpower has not been use yet\n  // 1 - counterattack has been used in previous turn\n  // 2 - superpower has benn already used\n\n  const [superpowerUsed, setSuperpowerUsed] = useState(0);\n\n  function oponentsAttack() {\n    //  superpower decides if computer use superpower\n    let superpower = Math.random();\n\n    // superpowerNow decides, if trigger superpower animation\n    let superpowerNow = false;\n\n    //   power of first hand weapon\n    let oponentsPower = 0;\n\n    if (store.oponentItems.armed.firstHand.length > 1) {\n      oponentsPower =\n        store.oponentItems.armed.firstHand[0] +\n        Math.floor(\n          (store.oponentItems.armed.firstHand[1] -\n            store.oponentItems.armed.firstHand[0] +\n            1) *\n            Math.random()\n        );\n    } else {\n      oponentsPower = store.oponentItems.armed.firstHand[0];\n    }\n\n    //   power of second hand weapon\n    let oponentsSecondPower = 0;\n\n    if (store.oponentItems.armed.secondHand.stat.length > 1) {\n      oponentsSecondPower =\n        store.oponentItems.armed.secondHand.stat[0] +\n        Math.floor(\n          (store.oponentItems.armed.secondHand.stat[1] -\n            store.oponentItems.armed.secondHand.stat[0] +\n            1) *\n            Math.random()\n        );\n    } else {\n      oponentsSecondPower = store.oponentItems.armed.secondHand.stat[0];\n    }\n\n    //   attack damage\n    let oponentAttack;\n\n    if (\n      // if Fatal strike superpower was used\n      superpower < 0.5 &&\n      store.oponentSuperpower == \"Fatal strike\" &&\n      superpowerUsed == 0 &&\n      store.oponentParameters.energy > 10\n    ) {\n      oponentAttack = store.oponentSkils.attack * 2 + oponentsPower * 2.5;\n      setSuperpowerUsed(2);\n      superpowerNow = true;\n      dispatch(makeMove([\"+ Fatal strike\"]));\n    } else {\n      oponentAttack =\n        store.oponentSkils.attack * 2 +\n        oponentsPower * 2.5 -\n        store.skills[1].amount * 1.5;\n    }\n\n    if (store.items.armed.secondHand.type == \"shield\") {\n      if (store.oponentItems.armed.secondHand.type == \"shield\") {\n        oponentAttack -= store.items.armed.secondHand.defense * 2;\n      } else {\n        oponentAttack +=\n          (oponentsSecondPower - store.items.armed.secondHand.defense) * 2;\n      }\n    } else {\n      if (store.oponentItems.armed.secondHand.type == \"second weapon\") {\n        oponentAttack += oponentsSecondPower * 2;\n      }\n    }\n\n    // when attack damage is below 1, set attack on 1 so damage will not be on minus\n\n    if (oponentAttack < 1) {\n      oponentAttack = 1;\n    }\n\n    // whichAttack decides what move computer will make\n    // nr decides if hit hits or misses,\n\n    let whichAttack = Math.random();\n    let nr = Math.random();\n\n    // cant make some attacks when energy is below of certain level\n\n    if (store.oponentParameters.energy < 15) {\n      whichAttack = whichAttack / 2;\n    } else if (store.oponentParameters.energy < 25) {\n      whichAttack = whichAttack / 1.25;\n    }\n\n    // what move oponent do?\n\n    if (superpowerUsed == 1) {\n      // counterattack used in previous tour\n      oponentAttack += oponentAttack;\n      setSuperpowerUsed(2);\n    }\n    if (\n      // use Giant smash superpower\n      superpowerUsed == 0 &&\n      superpower < 0.5 &&\n      store.oponentSuperpower == \"Giant smash\"\n    ) {\n      oponentAttack += 2 * store.oponentSkils.vitality;\n      setSuperpowerUsed(2);\n      dispatch(makeMove([\"+ Giant smash\"]));\n    }\n\n    function move() {\n      if (\n        // use Counterattack\n        superpowerUsed == 0 &&\n        superpower < 0.5 &&\n        store.oponentParameters.energy < 85 &&\n        store.oponentSuperpower == \"Counterattack\"\n      ) {\n        dispatch(oChangeEnergy(15));\n        dispatch(oGiveDefense(0.5));\n        setSuperpowerUsed(1);\n        dispatch(makeMove([\"+ Counterattack\"]));\n      } else {\n        if (store.oponentParameters.energy < 10) {\n          // Oponent have no energy, have to rest or deffense\n          let deffOrRest = Math.random();\n          if (deffOrRest < 0.5) {\n            dispatch(oChangeEnergy(25));\n            dispatch(makeMove([\"oRest\"]));\n          } else {\n            dispatch(oChangeEnergy(15));\n            dispatch(oGiveDefense(0.5));\n            move();\n            dispatch(makeMove([\"oDefense\"]));\n          }\n        } else {\n          // oponent have energy so he attack\n          if (whichAttack < 0.5) {\n            dispatch(oChangeEnergy(-10));\n          } else if (whichAttack >= 0.5 && whichAttack < 0.8) {\n            dispatch(oChangeEnergy(-15));\n          } else if (whichAttack >= 0.8) {\n            dispatch(oChangeEnergy(-25));\n          }\n          if (whichAttack < 0.5 && nr < 0.9) {\n            dispatch(changeHealth(-Math.round(oponentAttack)));\n            dispatch(makeMove([\"oAttack\", Math.round(oponentAttack)]));\n          } else if (whichAttack >= 0.5 && whichAttack < 0.8 && nr < 0.7) {\n            dispatch(changeHealth(-Math.round(oponentAttack * 2)));\n            dispatch(makeMove([\"oAttack\", Math.round(oponentAttack * 2)]));\n          } else if (whichAttack >= 0.8 && nr < 0.37) {\n            dispatch(changeHealth(-Math.round(oponentAttack * 5)));\n            dispatch(makeMove([\"oAttack\", Math.round(oponentAttack * 5)]));\n          } else {\n            dispatch(makeMove([\"oBlock\"]));\n          }\n        }\n      }\n    }\n\n    // this timeout gives time for superpower animation to run\n    if (superpowerNow == true) {\n      setTimeout(() => {\n        move();\n      }, 1000);\n    } else {\n      move();\n    }\n  }\n\n  return oponentsAttack;\n}\n\nexport default useOponentMove;\n","import React, { useEffect, useState } from \"react\";\n\nimport { useSelector } from \"react-redux\";\n\nimport useOponentMove from \"../../hooks/useOponentMove\";\n\nimport oponents from \"../../database/oponents\";\nimport health from \"../../database/images/health.png\";\nimport energy from \"../../database/images/energy.png\";\nimport attack from \"../../database/images/attack.png\";\nimport shield from \"../../database/images/shield.png\";\n\nfunction OponentDescription() {\n  const store = useSelector((state) => state);\n  const oponentAttack = useOponentMove();\n\n  const [firstMove, setFirstMove] = useState(false);\n\n  const oponentImg = oponents.find((x) => x.name == store.oponentName).img;\n\n  // Opponent make a move 2 seconds after user move\n  // 2 seconds because thats how long the longest animation of user move takes\n\n  // this useEffect trigger on user energy change or user deffense change,\n  // because every user move changes energy or deffense\n\n  useEffect(() => {\n    setFirstMove(true);\n    if (firstMove && store.oponentParameters.health > 0) {\n      setTimeout(() => {\n        oponentAttack();\n      }, 2000);\n    }\n  }, [store.skills[1].amount, store.parameters.energy]);\n\n  return (\n    <div className=\"oponentDescriptionContainer\">\n      <img alt=\"opponent look\" className=\"oponentImg\" src={oponentImg} />\n      <div className=\"userSkillsContainer\">\n        <div className=\"healthContainer\">\n          <div className=\"parametr\">\n            <img alt=\"health\" src={health} />\n            <div>Health: {store.oponentParameters.health}</div>\n          </div>\n          <div className=\"parametr\">\n            <img alt=\"energy\" src={energy} />\n            <div>Energy: {store.oponentParameters.energy}</div>\n          </div>\n        </div>\n        <div className=\"userDescription\">\n          <div>Name: {store.oponentName}</div>\n          <div>Level: {store.oponentLevel}</div>\n          <div className=\"parametr\">\n            <img alt=\"attack\" src={attack} />\n            <div>Attack: {store.oponentSkils.attack}</div>\n          </div>\n          <div className=\"parametr\">\n            <img alt=\"deffense\" src={shield} />\n            <div>Defense: {store.oponentSkils.defense}</div>\n          </div>\n          <div className=\"parametr\">\n            <img alt=\"vitality\" src={health} />\n            <div>Vitality: {store.oponentSkils.vitality}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default OponentDescription;\n"],"names":["store","useSelector","state","dispatch","useDispatch","useState","superpowerUsed","setSuperpowerUsed","superpower","Math","random","superpowerNow","oponentsPower","oponentItems","armed","firstHand","length","floor","oponentAttack","oponentsSecondPower","secondHand","stat","oponentSuperpower","oponentParameters","energy","oponentSkils","attack","makeMove","skills","amount","items","type","defense","whichAttack","nr","move","oChangeEnergy","oGiveDefense","changeHealth","round","vitality","setTimeout","useOponentMove","firstMove","setFirstMove","oponentImg","oponents","x","name","oponentName","img","useEffect","health","parameters","className","alt","src","oponentLevel","shield"],"sourceRoot":""}